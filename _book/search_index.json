[["main.html", "Chapter 5 main.rs 5.1 We Have an Executable!!", " Chapter 5 main.rs If you compile the library as it is you will not be able to use it. We need to implement the main.rs file that codes for the binary. Command line options are normally parsed using the clap crate so we should add that to our project. This time I want a specific version: cargo add clap@3.0.14 --features derive We need to get the input table, the separation for that table, the number of clusters to search for, the starting tem, cool-down factor and max iteration to run through as well as the file we want to save the clusters to. In Rust you would do this like that: use clap::Parser; #[derive(Parser)] #[clap(version = &quot;1.0.0&quot;, author = &quot;Stefan L. &lt;stefan.lang@med.lu.se&gt;&quot;)] struct Opts { /// the input text table #[clap(short, long)] file: String, /// the column separator for the file #[clap(default_value= &quot;\\\\t&quot;,short, long)] sep: String, /// the number of clusters #[clap(short, long)] clusters: usize, /// the starting temperature #[clap(default_value_t= 20.0,short, long)] temp: f32, /// the cooling factor #[clap(default_value_t= 0.9995,short, long)] cool: f32, ///max number of iterations #[clap(default_value_t= 1000*1000,short, long)] max_it: usize, /// the grouping outfile #[clap(short, long)] outfile: String, } This is simple -right? Add the main function to that script and we are ready to go: use std::time::SystemTime; // this is specific for my package which I have called simulated_annealing_new as I had an other version, too. use simulated_annealing::SimulatedAnnealing; fn main() { let now = SystemTime::now(); let opts: Opts = Opts::parse(); let mut sep = &#39;\\t&#39;; if &amp;opts.sep != &quot;\\\\t&quot;{ //println!(&quot;I set sep to {}&quot;, opts.sep ); sep = opts.sep.chars().next().unwrap(); } let mut sim = SimulatedAnnealing::new( &amp;opts.file, opts.clusters, opts.temp, sep ); sim.scale_01(); //println!(&quot;Initial state: {sim}&quot;); let iterations = sim.run( opts.max_it, opts.cool ); let _= sim.plot( &amp;opts.outfile ); //println!(&quot;Final state {sim} in {iterations} iterations&quot;); match sim.write_clusters( &amp;opts.outfile, sep ){ Ok(_) =&gt; println!(&quot;Clusters written to {}&quot;, &amp;opts.outfile ), Err(e) =&gt; eprintln!(&quot;Failed to write the data to {}: {:?}&quot;, &amp;opts.outfile, e), } match now.elapsed() { Ok(elapsed) =&gt; { let mut milli = elapsed.as_millis(); let mil = milli % 1000; milli= (milli - mil) /1000; let sec = milli % 60; milli= (milli -sec) /60; let min = milli % 60; milli= (milli -min) /60; eprintln!(&quot;finished in {milli} h {min} min {sec} sec {mil} milli sec&quot;); }, Err(e) =&gt; {println!(&quot;Error: {e:?}&quot;);} } } The main function is very simple - halve of it is actually calculating the time the program takes to finish. Try it? make step4 | sed &#39;s/\\x1B\\[[0-9;]*m//g&#39; ## Building /home/med-sal/git_Projects/tutorial_rust_simulated_annealing/rust_stages/step4... ## warning: unused variable: `iterations` ## --&gt; src/main.rs:48:9 ## | ## 48 | let iterations = sim.run( opts.max_it, opts.cool ); ## | ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_iterations` ## | ## = note: `#[warn(unused_variables)]` on by default ## ## warning: `simulated_annealing` (bin &quot;simulated_annealing&quot; test) generated 1 warning ## warning: `simulated_annealing` (bin &quot;simulated_annealing&quot;) generated 1 warning (1 duplicate) ## Finished ]8;;https://doc.rust-lang.org/cargo/reference/profiles.html#default-profiles\\`release` profile [optimized]]8;;\\ target(s) in 0.04s ## Running unittests src/lib.rs (target/release/deps/simulated_annealing-ec0f849373011f09) ## ## running 2 tests ## test tests::tes_scale01 ... ok ## test tests::test_read_data ... ok ## ## test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s ## ## Running unittests src/main.rs (target/release/deps/simulated_annealing-34887cf23462f205) ## ## running 0 tests ## ## test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s ## ## Running tests/test-SimulatedAnnealing.rs (target/release/deps/test_SimulatedAnnealing-fd16fac0ecee9aa3) ## ## running 1 test ## test test_simulated_annealing ... ok ## ## test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s ## ## Doc-tests simulated_annealing ## ## running 0 tests ## ## test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s ## ## Finished building /home/med-sal/git_Projects/tutorial_rust_simulated_annealing/rust_stages/step4. Logs are in step4_build.log 5.1 We Have an Executable!! You now can run the executable target/release/simulated_annealing like that: #I need to go to another directory - you stac where you are: cd rust_stages/step4 #and run the script: target/release/simulated_annealing -f tests/data/Spellman_Yeast_Cell_Cycle.tsv --clusters 8 --temp 20 --outfile /tmp/clusters.tsv ## Saved: /tmp/clusters.tsv_cluster_1.png ## Saved: /tmp/clusters.tsv_cluster_2.png ## Saved: /tmp/clusters.tsv_cluster_3.png ## Saved: /tmp/clusters.tsv_cluster_4.png ## Saved: /tmp/clusters.tsv_cluster_5.png ## Saved: /tmp/clusters.tsv_cluster_6.png ## Saved: /tmp/clusters.tsv_cluster_7.png ## Saved: /tmp/clusters.tsv_cluster_8.png ## Clusters written to /tmp/clusters.tsv ## finished in 0 h 0 min 0 sec 405 milli sec "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
